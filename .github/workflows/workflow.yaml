name: build-test
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  license:
    name: license
    runs-on: ubuntu-latest
    steps:
      - name: addlicense
        run: go get github.com/google/addlicense

      - name: checkout
        uses: actions/checkout@v2

      - name: gen license headers
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          make license

      - name: check diff
        run: git diff --exit-code

  doc-gen:
    name: doc gen
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: set up go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15.7

      - uses: actions/cache@v2.1.3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: gen doc
        run: make doc-gen

      - name: check diff
        run: git diff --exit-code

  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29
          args: -v

  unittests:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest]
    name: unittests
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: set up go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15

      - uses: actions/cache@v2.1.3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: download dependencies
        run: go mod download

      - name: run
        run: make unit-test

      - name: build
        run: go build .
  unittests-armv7:
    strategy:
      matrix:
        os: [ ubuntu-latest ] # TODO add macos to testing env
        include:
          - arch: armv7
            distro: ubuntu18.04
    name: unittests on armv7
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: arm based unit tests
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          # Create an artifacts directory
          dockerRunArgs: |
            --volume "${PWD}:/usr/src/project"
          # The shell to run commands with in the container
          shell: /bin/sh
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster)
                apt-get update -q -y
                apt-get install -q -y git
                apt-get install -q -y wget
                apt-get install -q -y make
                apt-get install -q -y build-essential
                ;;
            esac
          run: |
            wget -q https://golang.org/dl/go1.15.linux-armv6l.tar.gz
            tar -C /usr/local -xzf go1.15.linux-armv6l.tar.gz
            export PATH=$PATH:/usr/local/go/bin
            go mod download
            make unit-test
            go build .
  e2e-test:
    strategy:
      matrix:
        os: [ ubuntu-latest ] # TODO: once kind is available for macos, test against it
    name: e2e test
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: set up go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15

      - name: setup kind cluster
        uses: engineerd/setup-kind@v0.5.0

      - uses: actions/cache@v2.1.3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: build
        run: go build .

      - name: e2e
        run: |
          make e2e-test
